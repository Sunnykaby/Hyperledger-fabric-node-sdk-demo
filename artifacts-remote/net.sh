#!/bin/bash

WORK_DIR=${PWD}
FAB_VER=v1.2.0

# Print the usage message
function printHelp() {
	echo "Usage: "
	echo "  net.sh init|code|link|replace|create|clean"
	echo "  net.sh -h|--help (print this message)"
	echo "    <mode> - one of 'init', 'code', 'link', 'repalce', 'create', 'clean'"
	echo "      - 'init' - init the fabric network env from github"
	echo "      - 'code' - get the fabric-sample source code from github"
	echo "      - 'link' - link the related stuffs to the target dir"
	echo "      - 'replace' - replace the private key *_sk to the config files"
	echo "      - 'create' - create one org or two orgs channel tx"
	echo "      - 'clean' - rm the unuseless dir and files"
	echo
}

function do_code() {
	# Get fabirc sample project to setup a test network
	git clone https://github.com/hyperledger/fabric-samples.git
	cd fabric-samples
	git checkout $FAB_VER
	cd ..
	ln -s fabric-samples/first-network net
	cp -f artifacts/net_config/byfn.sh fabric-samples/first-network/
	cp -f artifacts/net_config/configtx.yaml fabric-samples/first-network/
}

function do_link() {
	# Link the network stuff
	cd artifacts
	ln -s ../fabric-samples/first-network/crypto-config crypto-config
	ln -s ../fabric-samples/first-network/channel-artifacts channel-artifacts
}

# Using network-tmpl.yaml, replace constants with private key file names
# generated by the cryptogen tool and output a network.yaml specific to this
# configuration
function replacePrivateKey() {
	# sed on MacOSX does not support -i flag with a null extension. We will use
	# 't' for our back-up's extension and depete it at the end of the function
	ARCH=$(uname -s | grep Darwin)
	if [ "$ARCH" == "Darwin" ]; then
		OPTS="-it"
	else
		OPTS="-i"
	fi
	CURRENT_DIR=$PWD
	cd artifacts/connection-profile
	cp network-tmpl.yaml network.yaml
	cd $CURRENT_DIR/artifacts
	# The next steps will replace the template's contents with the
	# actual values of the private key file names for the two Orgs.

	
	cd crypto-config/peerOrganizations/org1.example.com/users/Admin@org1.example.com/msp/keystore/
	PRIV_KEY=$(ls *_sk)
	cd "$CURRENT_DIR"
	sed $OPTS "s/ORG1_PRIVATE_KEY/${PRIV_KEY}/g" artifacts/connection-profile/network.yaml
	cd artifacts
	cd crypto-config/peerOrganizations/org2.example.com/users/Admin@org2.example.com/msp/keystore/
	PRIV_KEY=$(ls *_sk)
	cd "$CURRENT_DIR"
	sed $OPTS "s/ORG2_PRIVATE_KEY/${PRIV_KEY}/g" artifacts/connection-profile/network.yaml
	# Change the orderer's private key
	cd artifacts
	cd crypto-config/ordererOrganizations/example.com/users/Admin@example.com/msp/keystore/
	PRIV_KEY=$(ls *_sk)
	cd "$CURRENT_DIR"
	sed $OPTS "s/ORDERER_PRIVATE_KEY/${PRIV_KEY}/g" artifacts/connection-profile/network.yaml
	# If MacOSX, remove the temporary backup of the docker-compose file
	if [ "$ARCH" == "Darwin" ]; then
		rm network.yamlt
	fi
}

function do_replace() {
	replacePrivateKey
}

function do_init() {
	do_code
	cd $WORK_DIR/net
	res=$(./byfn.sh up)
	cd $WORK_DIR
	do_link
	cd $WORK_DIR
	do_replace
	cd $WORK_DIR
	createChannelTx 0 channel2

	echo "All Done!"
}

function createChannelTx() {
	cd net
	CHANNEL_TYPE=""
	if [ $1 == 0 ]; then
		CHANNEL_TYPE="OneOrgsChannel"
	elif [ $1 == 1 ]; then
		CHANNEL_TYPE="TwoOrgsChannel"
	fi
	CHANNEL_NAME=$2

	which configtxgen
	if [ "$?" -ne 0 ]; then
		echo "configtxgen tool not found. exiting"
		exit 1
	fi

	echo
	echo "#################################################################"
	echo "### Generating channel configuration transaction 'channel.tx' ###"
	echo "#################################################################"
	set -x
	configtxgen -profile $CHANNEL_TYPE -outputCreateChannelTx ./channel-artifacts/$CHANNEL_NAME.tx -channelID $CHANNEL_NAME
	res=$?
	set +x
	if [ $res -ne 0 ]; then
		echo "Failed to generate channel configuration transaction..."
		exit 1
	fi

	echo
}

function do_clean() {
	# Link the network stuff
	cd net
	res=$(./byfn.sh down)
	echo $res
	cd $WORK_DIR
	rm net
	rm -rf fabric-samples
	rm artifacts/crypto-config
	rm artifacts/channel-artifacts
	rm artifacts/connection-profile/network.yaml
}

MODE=$1

# Determine whether starting, stopping, restarting or generating for announce
if [ "$MODE" == "code" ]; then
	do_code
elif [ "$MODE" == "link" ]; then
	do_link
elif [ "$MODE" == "replace" ]; then
	do_replace
elif [ "$MODE" == "init" ]; then
	do_init
elif [ "$MODE" == "create" ]; then
	TYPE=$2
	CHANNEL_NAME=$3
	echo $TYPE
	echo $CHANNEL_NAME
	if [ $TYPE != 0 -a $TYPE != 1 ]; then
		printHelp
		exit 1
	fi
	createChannelTx $TYPE $CHANNEL_NAME
elif [ "$MODE" == "clean" ]; then
	do_clean
else
	printHelp
	exit 1
fi
